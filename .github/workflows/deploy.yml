name: Deploy Laravel Application
on:
  push:
    branches: [ main ]
  # Die folgenden 2 Zeilen entfernen vor Merge
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      run: |
        php -v
        which php
        which composer

    - name: Setup Node.js via NVM
      run: |
        # NVM laden
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        
        # Node.js 20 verwenden
        nvm use 20
        
        # PATH f√ºr nachfolgende Steps setzen
        echo "$HOME/.nvm/versions/node/v20.19.2/bin" >> $GITHUB_PATH
        
        # Versionen √ºberpr√ºfen
        node -v
        npm -v
        
    - name: Copy .env file
      run: |
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress
      
    - name: Generate application key
      run: |
        if grep -q "APP_KEY=$" .env; then
          php artisan key:generate
        fi
        
    - name: Run tests
      run: php artisan test

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      run: |
        php -v
        which php
        which composer

    - name: Setup Node.js via NVM
      run: |
        # NVM laden
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        
        # Node.js 20 verwenden
        nvm use 20
        
        # PATH f√ºr nachfolgende Steps setzen
        echo "$HOME/.nvm/versions/node/v20.19.2/bin" >> $GITHUB_PATH
        
        # Versionen √ºberpr√ºfen
        node -v
        npm -v
        
    - name: Install/Update Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-progress
      
    - name: Create deployment directory
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        DEPLOY_PATH="/var/www/deployments/laser-$TIMESTAMP"
        echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        sudo mkdir -p $DEPLOY_PATH
        sudo chown user:www-data $DEPLOY_PATH
        
    - name: Copy application files
      run: |
        cp -R . $DEPLOY_PATH/
        cd $DEPLOY_PATH
        
    - name: Copy production environment file
      run: |
        cd $DEPLOY_PATH
        if [ -f /var/www/laser/.env ]; then
          cp /var/www/laser/.env .env
        else
          cp .env.example .env
        fi
        
    - name: Generate application key (if needed)
      run: |
        cd $DEPLOY_PATH
        if grep -q "APP_KEY=$" .env; then
          php artisan key:generate
        fi
        
    - name: Run database migrations
      run: |
        cd $DEPLOY_PATH
        php artisan migrate --force
        
    - name: Clear and cache configuration
      run: |
        cd $DEPLOY_PATH
        php artisan config:clear
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
    - name: Install Node.js dependencies (if needed)
      run: |
        cd $DEPLOY_PATH
        if [ -f package.json ]; then
          echo "package.json found, installing npm dependencies..."
          
          # √úberpr√ºfen ob npm verf√ºgbar ist
          if command -v npm >/dev/null 2>&1; then
            echo "‚úÖ npm found: $(npm -v)"
            npm ci
            npm run build
            echo "‚úÖ Frontend assets compiled successfully"
          else
            echo "‚ùå npm not found in PATH"
            echo "Available paths:"
            echo $PATH
            exit 1
          fi
        else
          echo "No package.json found, skipping npm steps"
        fi
        
    - name: Set proper permissions
      run: |
        cd $DEPLOY_PATH
        sudo chown -R www-data:www-data storage bootstrap/cache
        sudo chmod -R 775 storage bootstrap/cache
        
    - name: Create symbolic link for storage
      run: |
        cd $DEPLOY_PATH
        php artisan storage:link
        
    - name: Switch to new deployment
      run: |
        # Backup current deployment
        if [ -L /var/www/laser ]; then
          CURRENT_DEPLOYMENT=$(readlink /var/www/laser)
          sudo mv $CURRENT_DEPLOYMENT /var/www/deployments/backup-$(date +%Y%m%d_%H%M%S)
        elif [ -d /var/www/laser ]; then
          sudo mv /var/www/laser /var/www/deployments/backup-$(date +%Y%m%d_%H%M%S)
        fi
        
        # Create symbolic link to new deployment
        sudo ln -sfn $DEPLOY_PATH /var/www/laser
        
    - name: Reload PHP-FPM and Nginx
      run: |
        sudo systemctl reload php8.4-fpm
        sudo systemctl reload nginx
        
    - name: Clean up old deployments (keep last 5)
      run: |
        cd /var/www/deployments
        sudo find . -maxdepth 1 -name "laser-*" -type d | sort -r | tail -n +6 | xargs -r sudo rm -rf
        
    - name: Health check
      run: |
        sleep 5
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
        if [ $HTTP_CODE -eq 200 ]; then
          echo "‚úÖ Deployment successful! Application is responding."
        else
          echo "‚ùå Deployment may have issues. HTTP Code: $HTTP_CODE"
          exit 1
        fi
        
    - name: Deployment notification
      run: |
        echo "üöÄ Laravel application deployed successfully!"
        echo "üìÖ Deployment time: $(date)"
        echo "üìÅ Deployment path: $DEPLOY_PATH"